DROP table books;
DROP table  bookMembers;
DROP table bookOrders;


CREATE TABLE books (
  bookid      varchar(30) PRIMARY KEY,
  bookname    VARCHAR(40),
  publisher   VARCHAR(40),
  price       int 
);

CREATE TABLE  bookMembers (
  custid      int PRIMARY KEY,  
  name        VARCHAR(40),
  address     VARCHAR(50),
  phone       VARCHAR(20)
);


CREATE TABLE bookOrders (
  orderid varchar(30) PRIMARY KEY,
  custid  int REFERENCES bookMembers (custid),
  bookid  varchar(30) REFERENCES books (bookid),
  saleprice varchar(30),
  orderdate date
);

INSERT INTO books VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO books VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO books VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO books VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO books VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO books VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO books VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO books VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO books VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO books VALUES(10, 'Olympic Champions', 'Pearson', 13000);


INSERT INTO bookMembers VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO bookMembes VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');  
INSERT INTO bookMembes VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO bookMembers VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO bookMembers VALUES (5, '박세리', '대한민국 대전',  NULL);


INSERT INTO bookOrders VALUES (1, 1, 1, 6000, date('2014-07-01','yyyy-mm-dd')); 
INSERT INTO bookOrders VALUES (2, 1, 3, 21000, date('2014-07-03','yyyy-mm-dd'));
INSERT INTO bookOrders VALUES (3, 2, 5, 8000, date('2014-07-03','yyyy-mm-dd')); 
INSERT INTO bookOrders VALUES (4, 3, 6, 6000, date('2014-07-04','yyyy-mm-dd')); 
INSERT INTO bookOrders VALUES (5, 4, 7, 20000, date('2014-07-05','yyyy-mm-dd'));
INSERT INTO bookOrders VALUES (6, 1, 2, 12000, date('2014-07-07','yyyy-mm-dd'));
INSERT INTO bookOrders VALUES (7, 4, 8, 13000, date( '2014-07-07','yyyy-mm-dd'));
INSERT INTO bookOrders VALUES (8, 3, 10, 12000, date('2014-07-08','yyyy-mm-dd')); 
INSERT INTO bookOrders VALUES (9, 2, 10, 7000, date('2014-07-09','yyyy-mm-dd')); 
INSERT INTO bookOrders VALUES (10, 3, 8, 13000, date('2014-07-10','yyyy-mm-dd'));






-- 22. 평균 주문금액 이하의 주문에 대해서 주문번호와 금액을 보이시오.
​
		-- 평균주문금액부터
		SELECT  avg(saleprice)  avgprice from bookOrders;
		
		-- 11800원 미만 주문건 
		SELECT  avg orderid, saleprice  from bookOrders
		where saleprice < 11800
		order by saleprice;
	


-- 23. 각 고객의 평균 주문금액보다 큰 금액의 주문 내역에 대해서 주문번호, 고객번호, 금액을 보이시오.
​			SELECT  avg(saleprice) = avgprice from bookOrders;
		
		-- 11800원 초과 주준건 
		SELECT  avg orderid, saleprice  from bookOrders
		where saleprice > 11800
		order by saleprice;

-- 24. 대한민국에 거주하는 고객에게 판매한 도서의 총판매액을 구하시오.
​
		-- 한국 거주 고객부터
		SELECT from bookMembers
		where address like = '대한민국%';

		-- 한국의 도서 총판매액
	
		SELECT sum(saleprice) 총판매액  from bookOrders
		where custid in (2,3,5);

		-- 두개를 합쳐
		SELECT sum(saleprice) 총판매액  from bookOrders
		where custid in (SELECT  custid from bookMembers
		where address like = '대한민국%');
		
	
	
-- 25. 3번 고객이 주문한 도서의 최고 금액보다 
		-- 더 비싼 도서를 구입한 주문의 주문번호와 금액을 보이시오.
​
		-- 3 번 고객이 구매한 도서 최고금을 보자
		SELECT saleprice  from bookOrders
		where custid = 3;

		-- 고객 주문건을 보니 6000 12000 13000 보다 비싼거면 됨
		select orderid, saleprice  from bookOrders
		where saleprice > 6000 and saleprice > 12000
		and saleprice > 13000;
	
		-- 합쳐
		 select orderid, saleprice  from bookOrders
		where saleprice > all (SELECT saleprice  from bookOrders
		where custid = 3);
		
		
-- 26. EXISTS 연산자로 대한민국에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
​
		
			-- exists , not exists 는 in  /  not in 연산자로 처리 할 수 있고
			-- inner join 로 처리도 가능함
			-- in vs exist : 데이터가 많은 경우는 exists 가 유리함 
			-- join vs exists : exists 보다는 join이 나을 수도 있음
			--                  ↖두테이블 간의 데이터가 1:1 일치하는 경우에만
			-- 부속질의의 결과가 하나라도 있으면 참! 이라는 뜻
		
			-- exists : 상위 쿼리부터 계산 후 조건 비교한 다음 출력
			--   (main -> exists ) 순으로 실행됨

			-- in : 하위쿼리 먼저 계산 후 결과값을 상위커리에 대입하여 연산
			-- (in -> main query) 순으로 실행됨

		SELECT from bookMembers
		where address like = '대한민국%';
	
		SELECT  * from booOrders
		where EXISTS (	SELECT custid from bookMembers
		where address like = '대한민국%' and bo.custid = bm.custid;);
​
		-- 합쳐

SELECT sum (saleprice) 총판매액 from bookOrders bo
where exist(select custid from bookMembers bm
where address like = '대한민국%' and bo.custid = bm.custid;);



 -- 주문 안한 고객은?


 select name from customers c
 where not exists (SELECT custid from  orders o
 where orddate = '2019-03-15');
 




--  4/13 ----------------------------------------------------------------------------------------//




-- update ----------------//

-- Book 테이블에 새로운 도서 ‘스포츠 의학’을 삽입하시오. 	
-- 스포츠 의학은 한솔의학서적에서 출간했으며 가격은 미정이다. 
		desc books;
		insent into books (bookid, bookname, publisher)
		values (11,'스포츠의학','한솔의학서적')
		select * from books;
	
		-- 가격을 35400원으로 수정하면??
		update books
		set price = 35400
		where bookname = '스포츠 의학';
	

-- Book 테이블에서 도서번호가 11인 도서를 삭제하시오.
	
	delete from books
	where bookid = 11;

	rallback;

	-- bookMembers 테이블의 이름과 주소, 전화번호등을
	-- concat을 써서 -'홍길동' 고객님의 주소는 '%%%', 전화번호는 '!!!!'입니다 -를 출력하라
	SELECT CONCAT('홍길동','고객님의',' ','주소는',' ','%%%',', ','전화번호는',' ', '!!!!','입니다.') 
    
	SELECT name, address, phone from bookMembers;

	SELECT concat(name, '님의 주소는 ', address,'이며', ' 전화번호는 ', phone, ' 입니다.') from bookMembers;







-- ----------------	-- book이 빅데이터였다!!!!!!!!!!!


--  도서 제목에 야구가 포함된 도서를 농구로 변경한 뒤  변경결과를 확인하세요

		SELECT bookname, replace(bookname, '야구', '농구')
		from books;
		
		-- 이미 등록된걸 수정할 때는.
		update books 
		set bookname = replace(bookname, '야구', '농구')
		-- 10건 다 점검 후에 2건을 고쳐줌

		update books 
		set bookname = replace(bookname, '야구', '농구')
		where bookname like '%야규%';
		-- 2건을 고쳐줌	
		
		-- 결과를 확인해보자
		SELECT  * from books;
	
		rollback;
	
	
--  굿스포츠에서 출판한 도서의 제목과 제목의 글자수를 조회하세요

		-- 어느놈이 굿스포츠거인가..
		SELECT bookname from books
		WHERE publisher = '굿스포츠';

		-- 이제 글자수를 보자
		SELECT bookname, 
		LENGTH(bookname), CHAR_LENGTH(bookName)
		CHAR_LENGTH(replace(bookName, ' ','')) -- 책제목 공백도 제거하자
		from books
		WHERE publisher = '굿스포츠';
	
-- 고객 중 같은 성을 가진 고객의 수를 조회하세요
	
		SELECT name, left (name,1)
	-- or >> SELECT name, substr(name,1,1)
		from bookMembers;

		SELECT name, left (name,1)성, count(custid) 고객수
		from bookMembers
		group by 성 
		-- count & group by는엑셀에서 문자 포함 셀 선택 같은 놈임
		order by 고객수 desc;
		-- 오더 바이는 정렬 명령임
	












-- 4 / 14 ------------------------------------------------------------------------//



-- 마당서점은 주문일로부터 10일 후 매출을 확정한다. -- 각 주문의 확정일자를 구하시오.


		SELECT custid 주문자, orderdate 주문일, 
		orderdate + INTERVAL 10 day 주문확정일
		FROM bookOrders;


	SELECT orderdate  
	(SELECT ADDDATE(orderdate(), INTERVAL 10 day))
	FROM bookOrders;
	
	

-- 마당서점이 2014년 7월 7일에 주문받은 도서의 주문번호, -- 주문일, 고객번호, 도서번호를 모두 보이시오. -- 단, 주문일은 '%Y년 %m월 %d일' 형태로 표시한다.

	 		SELECT orderid, 
	 		DATE_FORMAT((orderdate, '%Y년 %m월 %d일') orderdate,
	 		custid, bookid
	 		FROM bookOrders;

-- DBMS 서버에 설정된 현재 날짜와 시간, 요일을 확인하시오.
​​
		SELECT now();
		SELECT DATE_FORMAT(now()
		'%Y년 %m월 %d일 %h시 %I분 %s초 %a') '현재날짜/시간';
	
		SELECT substr('월화수목금토', dayofweek(now()), 1);
		-- 결과 : 목	
	 	SELECT concat (SUBSTR 
		('월화수목금토', dayofweek(curdate()), 1), 
		 '요일') DAYOFWEEK;
	 	-- 결과 : 목요일
		

	
-- 기재 사항 중  미입력한 고객 조회 / 미기재로 써주기
		
		SELECT * FROM bookMembers;
					-- 결과: 박세리의 연락처가 공백임
	
		SELECT name, IFNULL(phone, '미기재') phone 
		FROM bookMembers bm ;
					-- 결과 : 박세리 |미기재          |
	

	
		-- 주문 금액이 많은 순위로 조회해보자
		SELECT 
		 RANK () OVER (ORDER BY saleprice) RANK,
		 saleprice custid  FROM bookOrders;	
			
		
-- 동률일 때는 같은 순위로, 건너뛰지 않음

				SELECT 
				DENSE_rank () over (order BY saleprice),
				saleprice, custid
				FROM bookOrders;
			
-- 주문금액을 누적분포값으로 순위를 매겨 조회
			
				SELECT 
				CUME_DIST () over (order BY saleprice) dval,
				saleprice, custid
				FROM bookOrders;				
		
			-- 8000원을 주문한 고객을 기준 40% 이하가 적게 주문함
			-- 60% 이상이 이 고객보다는 많이 주문함
			
			
			
-- PERCENT_RANK  : 백분율 순위로 표기
			
				SELECT 	custid, saleprice,
				round (PERCENT_RANK() 
				over (order by saleprice),2) pctrnk
				FROM bookOrders;
			
		-- 21000원 보다 낮은 금액 주문자가 100%(1) whswo
		-- 6000원 주문한 고객보다 적은 사람은 0%(0) 존재함
		
			
	-- 모든 행에서 첫번째 값 가져오기 : FIRST_VALUE (컬럼명)	
	-- 모든 행에서 마지막 값 가져오기 : LAST_VALUE	( 컬럼명)	
	

			-- 가장 많은 주문금액 대비 차액 출려하기
			
			SELECT custid, saleprice,
			 FIRST_VALUE(saleprice) 
			 over (order by saleprice desc) 가장많은 주문금액
			 saleprice - (FIRST_VALUE(saleprice)
			 over (order by saleprice desc)) 주문금액별 차이
			from bookOrder;
		
		
		-- 가장 적은 주문금액 대비 차액 출려하기
			SELECT custid, saleprice,
			 FIRST_VALUE(saleprice) 
			 over (order by saleprice) 가장 적은 주문금액
			 saleprice - (FIRST_VALUE(saleprice)
			 over (order by saleprice)) 주문금액별 차이
			from bookOrder desc;
			
			-- 일단 문법은 이런데 난 오류뜸;;
		
		
		
		
		
		
		
		
		
