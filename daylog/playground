
// 조인문 쓰는 법 익히기
// NVL 함수란 무엇?
// 생성데이터 확인  -> 데이터탭에서 확인 가능



create database playground;

create user 'playground'@'%'
identified by'bigdata'
grant
SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, TRIGGER
on playground.* to 'playground'@'%'
with GRANT OPTION;




테이블 만들기

			create table customers(
			custid varchar(10) primary key,
			name     varchar(10),
			age     int,
			grade   varchar(10),
			job     varchar,
			mileage int
			);


주문테이블
prodid, name, stock, price, maker
제품테이블
ordid, custid, prodid, qty, addr, orddate


			  create table products (
			  prodid char(3) primary key,
			  name  varchar(20),
			  stock int,
			  price int,
			  maker char(8)
			  );



			  create table orders (

			  orderid   char(3) primary key,
			  custid    varchar(10),
			  prodid   char(3),
			  qty       int,
			  addr  varchar(20),
			  orddate date
			  );



 테이블 날리는 법 :  drop table 삭제할테이블이름;


			insert into customers
			values ('apple','정소화',20,'gold', '학생', 1000);

			insert into products
			values('p01','그냥만두', 5000, 4500, '대한식품');








-- 4/12  ----------------------------------------------------------------------------------------------//





-- 42. LAST_NAME 이 Zlotkey 와 동일한 부서에 근무하는 모든 사원들의 사번 및
-- 고용날짜를 조회한다. 단, Zlotkey 는 제외한다.


				SELECT EMPLOYEE_ID, HIRE_DATE from EMPLOYEES
				where DEPARTMENT_ID = (SELECT DEPARTMENT_ID
				from EMPLOYEES where LAST_NAME = 'Zlotkey')
						 -- 부서번호를 알아내고 그 사람만 제외한다
				and LAST_NAME != 'Zlotkey';
		



-- 43. 회사 전체 평균 연봉보다 더 받는 사원들의 사번 및 LAST_NAME 을 조회한다.


			SELECT EMPLOYEE_ID, LAST_NAME 		
			WHERE SALARY > (SELECT round(avg(SALARY)) 
			평균연봉 from EMPLOYEES;
			


-- 44. LAST_NAME 에 u가 포함되는 사원들과 동일 부서에 근무하는 사원들의 사번 및 LAST_NAME 을 조회한다.

				SELECT EMPLOYEE_ID, LAST_NAME from EMPLOYEES
				WHERE DEPARTMENT_ID = (
				SELECT DISTINCT DEPARTMENT_ID from EMPLOYEES
				WHERE LAST_NAME like '%u%');



	
-- 45. King 을 매니저로 두고 있는 모든 사원들의 LAST_NAME 및 연봉을 조회한다.
		-- 즉, King의 부하직원의 성과 연봉 조회하라

				SELECT LAST_NAME, SALARY, MANAGER_ID FROM EMPLOYEES
				WHERE MANAGER_ID IN (
				SELECT EMPLOYEE_ID FROM EMPLOYEES
				WHERE LAST_NAME = 'King' or FIRST_NAME = 'King');


-- 46. EXECUTIVE 부서의 모든 사원들의 부서 번호, LAST_NAME, JOB_ID를  조회한다.

					
					SELECT LAST_NAME, JOB_ID
					WHERE DEPARTMENT_ID in (
					SELECT DEPARTMENT_ID FROM  DEPARTMENTS
					WHERE DEPARTMENT_NAME = 'EXECUTIVE');


	
-- 47. 회사 전체 평균 연봉 보다 더 버는 사원들 중 
-- LAST_NAME 에 u 가 있는 사원들이 근무하는 부서에서 
-- 근무하는 사원들의 사번, LAST_NAME 및 연봉을 조회한다.


				SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES
				WHERE SALARY > (
				SELECT avg(SALARY) FROM EMPLOYEES)
				and LAST_NAME like '%u%';
				-- 중복 제외 distinct한 결과는 4명

				SELECT DISTINCT EMPLOYEE_ID, LAST_NAME, SALARY FROM EMPLOYEES
				WHERE DEPARTMENT_ID IN(
				select DISTINCT  DEPARTMENT_ID FROM EMPLPYEES
				WHERE SALARY > (select avg (SALARY) FROM EMPLOYEES)
				and LAST_NAME like '%u%');



		
		
-- 48. 직업 ID 가 SA_MAN 인 사원들이 받을 수 있는 최대 연봉 보다 높게 받는 사원들의 LAST_NAME, JOB_ID 및 연봉을 조회한다

				
					SELECT LAST_NAME, JOB_ID, SALARY from EMPLOYEES
					WHERE SALARY > (SELECT MAX_SALARY FROM JOBS j
					WHERE  JOB_ID = 'SA_MAN');

	


-- 49. 직업 ID 가 SA_MAN 인 사원들의 최대 연봉 보다 
 -- 높게 받는 사원들의 LAST_NAME, JOB_ID 및 연봉을 조회한다.
-- 문제가 비슷해보이는 말장난을 함 이런 세퀴...

						SELECT LAST_NAME, JOB_ID, SALARY from EMPLOYEES
						WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES
						WHERE  JOB_ID = 'SA_MAN');

						SELECT LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES
						WHERE SALARY > all (select salary from EMPLOYEES
						where JOB_ID= 'SA_MAN');

	
-- 50. 도시 이름이 T 로 시작하는 지역에 사는 사원들의 사번, LAST_NAME 및 부서 번호를 조회한다.


				SELECT EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID 
				FROM EMPLOYEES WHERE DEPARTMENT_ID  in ()
				SELECT DEPARTMENT_ID from DEPARTMENTS d
				WHERE LOCATION_ID  in (
				SELECT LOCATION_ID FROM LOCATIONS
				where city like 'T%'));

			-- 이 문제는 조인이 더 합리적이다. 조인 사용 법을 익힐 것!
			-- 조인을 쓰면 메모리를 먹고, where 문을 서브쿼리를 쓰면 파워가 좀 든다는.


	
-- 51. ST_CLERK 인 직업 ID 를 가진 사원이 없는 부서 ID 를 조회한다.
				NULL 값은 제외한다. (NOT EXISTS 사용)

			-- ST_CLERK 를 먼저 찾는다

			SELECT DEPARTMENT_ID FROM EMPLOYEES
			WHERE JOB_ID = 'ST_CLERK';


			SELECT DISTINCT DEPARTMENT_ID, JOB_ID 
			FROM EMPLOYEES e2
			WHERE NOT EXISTS ( -- ST_CLERK 인 데이터를 제외한다는 명령
			SELECT DEPARTMENT_ID FROM EMPLOYEES e1
			WHERE JOB_ID = 'ST_CLERK' and 
			e1.DEPARTMENT_ID = e2.DEPARTMNET_ID)
			and DEAPRTMENT_ID is not NULL
			order by DEPARTMENT_ID;	
			-- job_ID가 000인 데이터를 제외하고 
			-- 나머지를 조회함.	
	
	
	
	
	
-- 52. ST_CLERK 인 직업 ID 를 가진 사원이 있는 부서 ID 를 조회한다.
-- NULL 값은 제외한다. (NOT EXISTS 사용)
​
			-- job_ID가 000인 부서의 데이터를 조회함
			SELECT DISTINCT DEPARTMENT_ID, JOB_ID 
			FROM EMPLOYEES e2 WHERE NOT EXISTS(
			SELECT DEPARTMENT_ID FROM EMPLOYEES e1
			WHERE  JOB_ID != 'ST_CLERK' 
			and e1.EMPLOYEE_ID = e2.EMPLOYEE_ID);
		
		
		
-- 53. 위치한 부서가 없는 국가 ID 및 국가 이름을 조회힌다.(NOT EXISTS 사용)


				SELECT COUNTRY_ID , COUNTRY_NAME 
				from COUNTRIES

				where not exists (
				SELECT  LOCATION_ID , DEPARTMENT_ID  
				FROM DEPARTMENTS d  
				inner join LOCATION l 	-- 있는 것들 찾아서 그걸 not exists 로 제외시켜버려..
				USING (LOCATION_ID)
				WHERE l.COUNTRY_ID = c.COUNTRY_ID);



			
-- 54. 위치한 부서가 있는 국가 ID 및 국가 이름을 조회힌다.(NOT EXISTS 사용)

			SELECT COUNTRY_ID, COUNTRY_NAME from COUNTRIES c
			where not exists (
			SELECT LOCATION_ID FROM LOCATIONS l
			inner join DEPARTMENTS d  
			using (LOCATION_ID)
			where  l.COUNTRY_ID != c.COUNTRY_ID);



-- 55. 기존의 직업을 여전히 가지고 있는 사원들의 사번 및 JOB_ID를 조회한다.

	
			 SELECT * FROM JOB_HISTORY  
			 ORDER by START_DATE;

			-- 잡히스토리를 보자구
			SELECT EMPLOYEE_ID, JOB_ID from EMPLOYEES e -- 전체가 다뜬다.
			where EMPLOYEE_ID not in ( -- 직원란에 히스토리와 같은 직책 기록이 있는 사람들을 거르는 것임
			SELECT EMPLOYEE_ID FROM JOB_HISTORY jh
			WHERE e.EMPLOYEE_ID = jh.EMPLOYEE_ID);



-- 56. 커미션을 버는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, 부서 번호 및 연봉을 조회한다.


				 SELECT LAST_NAME, department_ID, SALARY 
				from EMPLOYEES
				select 
				from EMPLOYEES where (department_ID, SALARY) 
				select department_ID, SALARY 
				from EMPLOYEES 
				WHERE COMMISSION_PCT  is not NULL );


-- 57. 위치 ID 가 1700 인 사원들의 연봉과 커미션이 동일한 사원들의 LAST_NAME,
-- 부서 번호 및 연봉을 조회한다.


			SELECT last_name, DEPARTMENT_ID, salary
			from EMPLOYEES e inner join DEPARTMENTS d 
			SELECT SALARY, NVL( (COMMISSION_PCT,0) in ( 
			select salary, NVL( (COMMISSION_PCT,0)
			from EMPLOYEES e inner join DEPARTMENTS d 
			using (DEPARTMENT_ID)
			WHERE LOCATION_ID = 1700 );



-- 58. LAST_NAME 이 'Kochhar' 인 사원과 동일한 연봉 및 커미션을 버는 사원들의
-- LAST_NAME, 부서 번호 및 연봉을 조회한다.


		-- 타깃 인을 조회해보자
		SELECT SALARY , COMMISSION_PCT FROM EMPLOYEES
		where LAST_NAME = 'Kochhar';
		
		-- 동일한 연봉 받는 사람을 조회하자
		SELECT LAST_NAME, DEPARTMENT_ID, SALARY 
		FROM EMPLOYEES 
		WHERE (SALARY, NVL(COMMISSION_PCT, 0)) in(
		SELECT  salary, NVL(COMMISSION_PCT, 0) from EMPLOYEES e 
						-- ↖ null값이 저장된 컬럼은 NVL함수로 변환해야만 결과가 제대로 나옴
		where LAST_NAME = 'Kochhar');
			





-- 4/13 ---------------------------------------------------------------------------------------------//

-- 저장된 정보에 UPDATE (덮어씌워 저장하기) 해서 수정하기
-- 디비버 auto Commit 해제 방법 - 오토업뎃 상태로 업데이트 코멘드 쓰면 헬게이트가 열림.
-- 덮어씌우는 update 와 저장 부분을 정해주는  where 문
-- 서버 내용을 복구하는 문 : rollback; 
-- 일부 문자 * 처리하기
-- 불필요한 문자, 공백 제거하기 : trim


-- job_title이 'Stock Manager'인 직원의 급여(salary) 20% 인상하세요 

	
					SELECT  sal from EMPLOYEES
					where JOB_ID = 'ST_MAN';

					update EMPLOYEES
					set slasry = salary * 1.2
					where job_id = (SELECT job_id from JOBS
					where JOB_TITLE = 'Stock Manager');

	
	
	
-- job_title이 'Sales Manager'인 직원들의 salary를 
-- 해당 직무의 최고 급여(max_salary)로 수정합니다 
-- 단, 입사일이 2005년 이전 입사자에 한해서 적용하세요 

					select JOB_ID from JOBS
					where JOB_TITLE = 'Sales Manager';  -- SA_MAN

					select JOB_ID from JOBS
					select MAX_SALARY = 'Sales Manager';

					SELECT  salary, HIRE_DATE from EMPLOYEES e
					where job_id = 'SA_MAN';

					update EMPLOYEES
					set SALARY = (SELECT MAX_SALARY from JOBS
					where JOB_TITLE = 'Sales Manager');
					where JOB_ID = (SELECT JOB_ID  from JOBS
					where JOB_TITLE = 'Sales Manager');
					and hire-date < '2005-01-01';

				rollback;




-- 직책에 'CLERK'가 포함된 직원을 삭제하세요 210번 부서 직원을 삭제하세요 

					select JOB_ID from EMPLOYEES
					WHERE JOB_ID LIKE '%CLERK%';

					delete from EMPLOYEES
					where JOB_ID LIKE '%CLERK%';

				rollback;
				
				
				

-- 210번 부서 직원을 삭제하세요 

					delete from EMPLOYEES
					WHERE DEPARTMENT_ID = 10;
					
					

-- 30번  부서를 삭세하세요.

					DELETE  from DEPARTMENTS  -- 사원 데이터에 부서 소속자가 있어서 삭제 불가함
					WHERE DEPARTMENT_ID = 30;

					DELETE  from EMPLOYEES  -- 사원 데이터지우고나서 부서를 지워야 가능함<- 
					WHERE DEPARTMENT_ID = 30;


					rollback;
					


-- 210번 부서 삭제
	 
					DELETE  from DEPARTMENTS -- 외래키가 없어서 삭제가능
					WHERE DEPARTMENT_ID = 210;

					rollback;
		
		
-- ob_title이 'Stock Clerk'인 직원 정보를 삭제하세요
	
					delete from EMPLOYEES
					where JOB_ID = (SELECT JOB_ID FROM JOBS
					where JOB_TITLE = 'Stock Clerk');

					rollback;

	

	
-- 이름(FIRST_NAME)이 M 으로 시작하는 사원의 모든 정보를 조회하라.
		
					SELECT * from EMPLOYEES -- 모든이니까 *을 쓴다
					where left (First_NAME, 1) = 'M';  -- 이방법이 더 좋음!

					SELECT * from EMPLOYEES
					where First_NAME like 'M%';


			
-- 이름(FIRST_NAME)의 두 번째 글자가 'a'인 사원의 이름(FIRST_NAME)과 연봉을 조회하라.
		
					SELECT FIRST_NAME, SALARY from EMPLOEES
					WHERE MID(FIST_NAME,2,1) = 'a';
					SELECT FIRST_NAME, SALARY from EMPLOEES
					WHERE FIST_NAME LIKE '_a%'; -- 두번째 글자니까 _ %~

		
		
-- 이름(FIRST_NAME)의 길이가 5글자 이상인 사원을 조회하라
​​		
					SELECT FIRST_NAME from EMPLOYEES
					WHERE LENGTH (FIRST_NAME) >= 5;
					order by length(FIRST_NAME);

					-- ↓ 별칭붙이기
						SELECT FIRST_NAME, LENGTH (FIRST_NAME) lenght 	-- <- 별칭부  
						from EMPLOYEES
						WHERE LENGTH (FIRST_NAME) >= 5;
						order by length;

		

-- 사원 이름, 직책, 부서전호를 조회하기. / 부서번호는 5자리로 맞추고, 빈자리는 0으로 채운다.
		

			-정신이 잠시 외출했던 순간.....
		
		
		
-- 사원의 이름과 성, 직책을 조회하시오. / 이름은 마지막 글자를 제외하고 *으로 대체하여 출력하기
		
					SELECT FIRST_NAME, 
					lpad (mid(FIRST_NAME, -1,1), length(FIRST_NAME),'*') 
					FROM EMPLOYEES;
					
					

	
-- 사원의 이름과 성 직책 조회 / 이름은 첫자만 제외하고 *로 처리하기

			SELECT FIRST_NAME 
				rpad (mid(FIRST_NAME, 1,1), length(FIRST_NAME),'*') 
			FROM EMPLOYEES;





		
